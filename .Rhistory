Vi <- DT[, .(value = setdiff(1:9, value)), keyby = "row"]
DT[Vi, on = c("row", "value")]
}
eliminate_byrow(DT)[row == 2 & col == 2]
eliminate_byrow(DT)
eliminate_byrow <- function(DT) {
Vi <- DT[, .(value = setdiff(1:9, value)), keyby = "row"]
Vi[DT, on = c("row", "value"), nomatch=0L]
}
eliminate_byrow(DT)
DT
Vi <- DT[, .(value = setdiff(1:9, value)), keyby = "row"]
DT[Vi, on = "row"]
DT[Vi, on = c("row", "value")]
DT[Vi, on = c("row", "value"), nomatch=0L]
Vi
DT
eliminate_byrow <- function(DT) {
V <- DT[, .(value = setdiff(1:9, value)), keyby = "row"]
for (i in 1:9) {
Vi <- V[.(i)][["value"]]
DT <- DT[implies(row == i & value %notin% Vi)]
}
DT
}
eliminate_byrow(DT)
eliminate_byrow <- function(DT) {
V <- DT[, .(value = setdiff(1:9, value)), keyby = "row"]
for (i in 1:9) {
Vi <- V[.(i)][["value"]]
DT <- DT[implies(row == i, value %notin% Vi)]
}
DT
}
eliminate_byrow(DT)
Vi
eliminate_byrow(DT)
key(DT)
DT[.(1L, 1L)]
V[.(1L)]
V <- DT[, .(value = setdiff(1:9, value)), keyby = "row"]
V[.(1L)]
X
DT
DT[row == 1]
DT[row == 1][, unique(value)]
eliminate_byrow <- function(DT) {
V <- DT[, .(value = setdiff(1:9, value)), keyby = "row"]
for (i in 1:9) {
Vi <- V[.(i)][["value"]]
DT <- DT[implies(row == i, vi %notin% Vi)]
}
DT
}
eliminate_byrow(DT)
X
sum(is.na(X))
usethis::use_package_doc()
library(sudokugh)
?print.sudoku
eg({
M2 <- sudoku::generateSudoku(Nblank = 25)
print_sudoku(M2)
})
eg({
M3 <- sudoku::solveSudoku(M2)
print_sudoku(M2, M3 != M2)
})
library(sudokugh)
sudokugh:::provide_array(M2)
M2
DT <- attr(X, "SolveArray")
DT <- attr(M2, "SolveArray")
DT
DT <- copy(DT)
library(data.table)
DT <- copy(DT)
DT
X <- M2
DT <- CJ(row = 1:9,
col = 1:9,
vi = 1:9)
for (i in 1:9) {
for (j in 1:9) {
DT[row == i & col == j, value := X[i, j]]
}
}
DT
DT
DT[, solved := NA]
DT[!is.na(value), solved := value == vi]
DT
DT[is.na(value) | solved == TRUE]
DT
anyNA(DT$solved)
DT <- CJ(row = 1:9,
col = 1:9,
vi = 1:9)
for (i in 1:9) {
for (j in 1:9) {
DT[row == i & col == j, value := X[i, j]]
}
}
DT[, solved := NA]
DT[!is.na(value), solved := value == vi]
DT
DT[, anyNA(solved)]
sapply(DT, anyNA)
DT <- CJ(row = 1:9,
col = 1:9,
vi = 1:9)
for (i in 1:9) {
for (j in 1:9) {
DT[row == i & col == j, value := X[i, j]]
}
}
DT
DT
anyNA(DT$value)
anyNA(X)
X
M2
anyNA(M2)
is.sudoku(M2)
MM2 <- copy(M2)
MM2
class(M2) <- "sudoku"
M2
anyNA(M2)
min(M2, na.rm = TRUE)
is.integer(M2)
is.double(M2)
set_sudoku <- function(X) {
eval.parent(substitute({
if (min(X, na.rm = TRUE) == 0L) {
# 0's should be zero
X[X == 0] <- NA
}
if (is.double(X)) {
# make integer
storage.mode(X) <- "integer"
}
class(X) <- "sudoku"
X
}))
}
set_sudoku(M2)
M2
is.integer(M2)
X
X <- M2
X
is.integer(X)
DT <- CJ(row = 1:9,
col = 1:9,
vi = 1:9)
for (i in 1:9) {
for (j in 1:9) {
DT[row == i & col == j, value := X[i, j]]
}
}
DT[, solved := NA]
DT[!is.na(value), solved := value == vi]
DT
sapply(DT, anyNA)
DT[is.na(value) | solved == TRUE]
unique(DT, by = c("row", "col"))
key(DT)
array2matrix <- function(DT) {
DT0 <- unique(DT, by = c("row", "col"))
X <- matrix(.subset2(DT, "value"), byrow = FALSE, nrow = 9L, ncol = 9L)
set_sudoku(X)
X
}
array2matrix(DT)
.subset2(DT, "value")
.subset2(DT0, "value")
DT0 <- unique(DT, by = c("row", "col"))
.subset2(DT0, "value")
X <- matrix(.subset2(DT0, "value"), byrow = FALSE, nrow = 9L, ncol = 9L)
set_sudoku(X)
X
M2
X <- matrix(.subset2(DT0, "value"), byrow = TRUE, nrow = 9L, ncol = 9L)
set_sudoku(X)
X
DT
M2
attr(X, "SolveArray")
attr(M2, "SolveArray")
array2matrix(attr(M2, "SolveArray"))
sudokugh:::provide_array(M2)
array2matrix(attr(M2, "SolveArray"))
M2
attr(M2, "SolveArray")
setattr(X, "SolveArray", NULL)
sudokugh:::provide_array(M2)
array2matrix(attr(M2, "SolveArray"))
attr(M2, "SolveArray")
attr(X, "SolveArray")
set_sudoku(X)
attr(X, "SolveArray")
DT <- attr(X, "SolveArray")
is.null(DT))
is.null(DT)
DT <- CJ(row = 1:9,
col = 1:9,
vi = 1:9)
for (i in 1:9) {
for (j in 1:9) {
DT[row == i & col == j, value := X[i, j]]
}
}
DT[, solved := NA]
DT[!is.na(value), solved := value == vi]
DT[is.na(value) | solved == TRUE]
DT <- DT[is.na(value) | solved == TRUE]
setattr(X, "SolveArray", DT)
X
setattr(X, "SolveArray", DT)
attr(M2, "SolveArray")
M2
M2 <- provide_array(M2)
M2 <- sudokugh:::provide_array(M2)
M2
attr(M2, "SolveArray")
provide_array <- function(X, force = FALSE) {
set_sudoku(X)
DT <- attr(X, "SolveArray")
if (is.null(DT) || force) {
DT <- CJ(row = 1:9,
col = 1:9,
vi = 1:9)
for (i in 1:9) {
for (j in 1:9) {
DT[row == i & col == j, value := X[i, j]]
}
}
DT[, solved := NA]
DT[!is.na(value), solved := value == vi]
DT <- DT[is.na(value) | solved == TRUE]
setattr(X, "SolveArray", DT)
}
X
}
M2 <- sudokugh:::provide_array(M2, TRUE)
attr(M2, "SolveArray")
provide_array <- function(X, force = FALSE) {
set_sudoku(X)
DT <- attr(X, "SolveArray")
if (is.null(DT) || force) {
DT <- CJ(row = 1:9,
col = 1:9,
vi = 1:9)
for (i in 1:9) {
for (j in 1:9) {
DT[row == i & col == j, value := X[i, j]]
}
}
DT[, solved := NA]
DT[!is.na(value), solved := value == vi]
DT <- DT[is.na(value) | solved == TRUE]
setattr(X, "SolveArray", DT)
}
X
}
M2 <- provide_array(M2, TRUE)
attr(M2, "SolveArray")
array2matrix(attr(M2, "SolveArray"))
DT
unique(DT, by = c("row", "col"))
DT <- attr(X, "SolveArray")
DT
unique(DT, by = "row", "col")
unique(DT, by = c("row", "col"))
.subset2(unique(DT, by = c("row", "col")), "value")
matrix(.subset2(unique(DT, by = c("row", "col")), "value"), nrow = 9)
set_sudoku(matrix(.subset2(unique(DT, by = c("row", "col")), "value"), nrow = 9))[]
set_sudoku(matrix(.subset2(unique(DT, by = c("row", "col")), "value"), nrow = 9))
A <- matrix(.subset2(unique(DT, by = c("row", "col")), "value"), nrow = 9)
set_sudoku(A)
A
attr(A, "SolveArray")
DT
array2matrix(DT)
array2matrix <- function(DT) {
DT0 <- unique(DT, by = c("row", "col"))
X <- matrix(.subset2(DT0, "value"), byrow = TRUE, nrow = 9L, ncol = 9L)
set_sudoku(X)
X
}
array2matrix(DT)
library(sudokugh)
attach(asNamespace("sudokugh"))
array2matrix(provide_array(M2, force = TRUE))
M2
eg({
M2 <- sudoku::generateSudoku(Nblank = 25)
print_sudoku(M2)
})
eg({
M3 <- sudoku::solveSudoku(M2)
print_sudoku(M2, M3 != M2)
})
M2
set_sudoku(M2)
M2
attr(M2, "SolveArray")
provide_array(M2)
M2
attr(M2, "SolveArray")
M2 <- provide_array(M2)
attr(M2, "SolveArray")
array2matrix(attr(M2, "SolveArray"))
identical(array2matrix(attr(M2, "SolveArray")), M2)
all.equal(array2matrix(attr(M2, "SolveArray")), M2)
?all.equal
all.equal(array2matrix(attr(M2, "SolveArray")), M2, check.attributes = FALSE)
dput(sudoku::generateSudoku(), control = NULL)
usethis::use_test("array2matrix")
M3 <- matrix(x, nrow = 9, ncol = 9)
devtools::test()
?identical
MM2 <-
matrix(as.integer(c(0, 0, 6, 7, 8, 0, 3, 2, 4,
4, 2, 3, 9, 1, 6, 0, 0, 0,
7, 8, 5, 0, 0, 3, 6, 0, 0,
0, 4, 8, 0, 0, 2, 1, 0, 6,
0, 7, 1, 5, 4, 8, 0, 9, 3,
3, 0, 2, 6, 7, 1, 8, 4, 5,
8, 0, 4, 2, 6, 9, 7, 5, 1,
2, 6, 9, 0, 5, 7, 0, 0, 0,
1, 0, 0, 0, 3, 4, 9, 6, 2)),
nrow = 9,
ncol = 9)
expect_equal(sudoku::solveSudoku(MM2, print.it = FALSE),
solve(MM2), check.attributes = FALSE)
expect_equal(sudoku::solveSudoku(MM2, print.it = FALSE),
as.matrix(solve(MM2)),
check.attributes = FALSE)
class(sudoku::solveSudoku(MM2, print.it = FALSE))
class(as.matrix(solve(MM2)))
expect_equal(sudoku::solveSudoku(MM2, print.it = FALSE),
unclass(solve(MM2)),
check.attributes = FALSE)
devtools::test()
x <- c(3, 9, 5, 0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 7, 0, 3, 5, 9, 0, 0,
0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 6, 0, 0, 3, 5,
0, 4, 0, 8, 4, 8, 1, 7, 0, 0, 0, 0, 0, 1, 4, 0, 0, 9, 0, 0, 8,
5, 0, 0, 0, 5, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 3, 0)
M3 <- matrix(x, nrow = 9, ncol = 9)
m3 <- matrix(x, nrow = 9, ncol = 9)
set_sudoku(M3)
M3 <- provide_array(M3)
array2matrix(attr(M3, "SolveArray"))
M3
expect_equal(target = array2matrix(attr(M3, "SolveArray")),
current = M3,
check.attributes = FALSE)
expect_equal(array2matrix(attr(M3, "SolveArray")),
M3,
check.attributes = FALSE)
?expect_equal
devtools::test()
DT
M2
DT <- attr(M2, "SolveArray")
DT
array2matrix(DT)
DT[row == 1]
DT[row == 1 & col <= 3]
array2matrix(DT)
paste0(NULL, NULL)
X
X <- sudoku::generateSudoku(25)
X
set_sudoku(X)
DT <- attr(X, "SolveArray")
DT <- CJ(row = 1:9,
col = 1:9,
vi = 1:9)
DT[, square := "C"]
for (i in 1:9) {
z1 <- if (i <= 3) "S" else if (i > 6) "N"
for (j in 1:9) {
z2 <- if (j <= 3) "W" else if (j > 6) "E"
if (!is.null(z2) || !is.null(z1)) {
DT[, square := paste0(z1, z2)]
}
DT[row == i & col == j, value := X[i, j]]
}
}
DT
DT
DT <- CJ(row = 1:9,
col = 1:9,
vi = 1:9)
DT[, square := "C"]
for (i in 1:9) {
z1 <- if (i <= 3) "S" else if (i > 6) "N"
for (j in 1:9) {
z2 <- if (j <= 3) "W" else if (j > 6) "E"
if (!is.null(z2) || !is.null(z1)) {
DT[row == i & col == j, square := paste0(z1, z2)]
}
DT[row == i & col == j, value := X[i, j]]
}
}
DT
DT
unique(DT, by = "square")
DT
DT[, .(u = unique(value)), keyby = "square"]
DT <- CJ(row = 1:9,
col = 1:9,
vi = 1:9)
DT[, square := " 0, 0"]
for (i in 1:9) {
z1 <- if (i <= 3) "-1" else if (i > 6) "+1" else " 0"
for (j in 1:9) {
z2 <- if (j <= 3) "-1" else if (j > 6) "+1" else " 0"
if (!is.null(z2) || !is.null(z1)) {
DT[row == i & col == j, square := paste0(z1, ",", z2)]
}
DT[row == i & col == j, value := X[i, j]]
}
}
DT
DT
DT[, .(u = unique(value)), keyby = "square"]
DT[, .(u = setdiff(1:9, unique(value))), keyby = "square"]
X
DT[, .(u = setdiff(1:9, unique(value))), keyby = "square"]
X
DT[row == 4L]
DT[row == 4L | square == " 0, 0"]
DT[row == 4L & square == " 0, 0"]
zoom2 <- function(M, i, j) {
I <- if_else(i <= 3L,
-1L,
if_else(i <= 6L,
0L,
1L))
J <- if_else(j <= 3L,
-1L,
if_else(j <= 6L,
0L,
1L))
zoom(M, I, J)
}
M2
setdiff(1:9, c(M2[4, ], M2[, 4], zoom2(M2, 4, 4))
)
library(hutils)
setdiff(1:9, c(M2[4, ], M2[, 4], zoom2(M2, 4, 4)))
M2
M2[1, 2]
M2[1, 3]
all(NA %in% 1:9)
library(sudokugh)
library(sudokugh)
M2
is_possible(M2, 1, 3, 5)
storage.mode(M2)
is_possible(M2, 1, 3, 3)
is_possible(M2, 1, 3, 4)
vapply(1:9, function(v) is_possible(M2, 1, 3, v), TRUE)
all(M2 %in% 1:9, na.rm = TRUE)
min(M2)
range(M2, na.rm = TRUE)
which(!M2 %in% 1:9, arr.ind = TRUE)
which(!M2 %in% 1:9)
M2[6]
c(5L, NA) %in% 1:9
library(sudokugh)
c(5L, NA) %in% 1:9
vapply(1:9, function(v) is_possible(M2, 1, 3, v), TRUE)
vapply(1:9, function(v) is_possible(M2, 1, 3, v), TRUE) %>% .[.]
library(sudokugh)
vapply(1:9, function(v) is_possible(M2, 1, 3, v), TRUE)
M30 <- sudoku::generateSudoku(30)
set_sudoku(M30)
solve(M30)
M50 <- sudoku::generateSudoku(50)
set_sudoku(M50)
solve(M30)
solve(M50)
vapply(1:9, function(v) is_possible(M50, 1, 3, v), TRUE)
DTx <-
CJ(i = 1:9,
j = 1:9)
as.logical(M50)
Mp <- M50
(storage.mode(Mp) <- "logical")
Mp
Mp <- M50
for (ii in 1:9) {
for (jj in 1:9) {
if (is.na(M50[ii, jj])) {
Mp[ii, jj] <- sum(vapply(1:9, function(v) is_possible(M50, ii, jj, v), TRUE))
} else {
Mp[ii, jj] <- NA_integer_
}
}
}
Mp
Mp[Mp == 2]
which(Mp == 2, TRUE)
which(vapply(1:9, is_possible(M50, 2, 1), TRUE))
which(vapply(1:9, function(v) is_possible(M50, 2, 1, v), TRUE))
which(vapply(1:9, function(v) is_possible(M50, 3, 1, v), TRUE))
M50
